@startuml
!include style.puml

box UI UI_COLOR_T1
participant ":MainWindow" as MainWindow UI_COLOR
end box


box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant "t:TogglePanelCommand" as TogglePanelCommand LOGIC_COLOR
participant "commandResult:CommandResult" as CommandResult LOGIC_COLOR
end box

[-> MainWindow :executeCommand(toggle wishlist)
activate MainWindow

MainWindow -> LogicManager : execute(toggle wishlist)
activate LogicManager

LogicManager -> AddressBookParser : parseCommand(toggle wishlist)
activate AddressBookParser

create TogglePanelCommand
AddressBookParser -> TogglePanelCommand
activate TogglePanelCommand

TogglePanelCommand --> AddressBookParser
deactivate TogglePanelCommand

AddressBookParser --> LogicManager : t
deactivate AddressBookParser

LogicManager -> TogglePanelCommand : execute()
activate TogglePanelCommand

create CommandResult
TogglePanelCommand -> CommandResult
activate CommandResult

CommandResult --> TogglePanelCommand
deactivate CommandResult

TogglePanelCommand --> LogicManager : commandResult
deactivate TogglePanelCommand
destroy TogglePanelCommand

LogicManager --> MainWindow : commandResult
deactivate LogicManager

alt isTogglePanel()

MainWindow -> CommandResult : getPanelName()
activate CommandResult

CommandResult --> MainWindow : wishlist
deactivate CommandResult

MainWindow -> MainWindow : togglePanel(wishlist)

MainWindow -> MainWindow : toggleEntireSidePanelIfNecessary()

end

MainWindow ->[ : commandResult
deactivate MainWindow

@enduml
